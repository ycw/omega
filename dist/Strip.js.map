{"version":3,"file":"Strip.js","sources":["../src/Strip/Strip.ts","../src/Strip/StripGeometry.ts","../src/Strip/StripHelper.ts","../src/Strip/UvPreset.ts"],"sourcesContent":["import { Vector3 } from 'three';\r\nimport { Curve, RadiusFn, TiltFn, Frame } from \"./Type\";\r\n\r\nexport class Strip {\r\n\r\n  constructor(\r\n    public curve: Curve,\r\n    public radius: number | RadiusFn = 1,\r\n    public tilt: number | TiltFn = 0\r\n  ) { }\r\n\r\n  // r-handed coords frames \r\n  // see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\r\n  computeFrames(\r\n    segments: number\r\n  ) {\r\n    const $T0 = new Vector3();\r\n    const $B0 = new Vector3();\r\n    const $N0 = new Vector3();\r\n    const $T = new Vector3();\r\n    const $B = new Vector3();\r\n    const $N = new Vector3();\r\n    const $v0 = new Vector3();\r\n    const $v1 = new Vector3();\r\n\r\n    const frames: Frame[] = [];\r\n    const tiltFn = this.tilt instanceof Function\r\n      ? this.tilt\r\n      : () => this.tilt as number;\r\n\r\n    const $set = (i: number, I: number) => {\r\n      frames[i] = [] as unknown as Frame;\r\n      frames[i][0] = $B0.clone(); //B\r\n      frames[i][1] = $N0.clone(); //N\r\n      frames[i][2] = $T0.clone(); //T\r\n      frames[i][3] = this.curve.getPointAt(i / I); //O\r\n      const t = tiltFn(i, I);\r\n      t && frames[i][0].applyAxisAngle($T0, t);\r\n      t && frames[i][1].applyAxisAngle($T0, t);\r\n    }\r\n\r\n    // 1st T\r\n    this.curve.getTangentAt(0, $T0);\r\n\r\n    // 1st B\r\n    $v1.set(Math.abs($T0.x), Math.abs($T0.y), Math.abs($T0.z));\r\n    $v0.set(1, 0, 0);\r\n    ($v1.y <= $v1.x)\r\n      ? ($v1.z <= $v1.y ? $v0.set(0, 0, 1) : $v0.set(0, 1, 0))\r\n      : ($v1.z <= $v1.x) && $v0.set(0, 0, 1);\r\n    $v1.crossVectors($T0, $v0).normalize();\r\n    $B0.crossVectors($T0, $v1);\r\n\r\n    // 1st N\r\n    $N0.crossVectors($T0, $B0);\r\n\r\n    // set 1st frame\r\n    $set(0, segments);\r\n\r\n    // rest..\r\n    for (let i = 1, u = NaN; i <= segments; ++i) {\r\n\r\n      // ratio\r\n      u = i / segments;\r\n\r\n      // T\r\n      this.curve.getTangentAt(u, $T);\r\n\r\n      // B\r\n      $B.copy($B0);\r\n      $v1.crossVectors($T0, $T).length() > Number.EPSILON\r\n        && $B.applyAxisAngle(\r\n          $v1.normalize(),\r\n          Math.acos(Math.max(-1, Math.min(1, $T0.dot($T))))\r\n        );\r\n\r\n      // N\r\n      $N.crossVectors($T, $B);\r\n\r\n      // put\r\n      $T0.copy($T);\r\n      $N0.copy($N);\r\n      $B0.copy($B);\r\n\r\n      // set frame\r\n      $set(i, segments);\r\n    }\r\n    return frames;\r\n  }\r\n}","import { BufferGeometry, Vector3, Float32BufferAttribute } from \"three\";\r\nimport { Strip } from \"./Strip\";\r\nimport { UvFn, Segments, ParsedSegments } from \"./Type\";\r\n\r\nexport class StripGeometry extends BufferGeometry {\r\n\r\n  constructor(\r\n    strip: Strip,\r\n    segments: number | Segments,\r\n    uvFn?: UvFn,\r\n  ) {\r\n    super();\r\n    this.#compute(strip, StripGeometry.parseSegments(segments), uvFn);\r\n  }\r\n\r\n  static parseSegments(\r\n    segments: number | Segments\r\n  ) {\r\n    const s = [] as unknown as ParsedSegments;\r\n    if (Array.isArray(segments)) {\r\n      s[0] = segments[0];\r\n      s[1] = (segments[1] === undefined) ? [segments[0]] : segments[1];\r\n      s[2] = segments[2] || 0;\r\n    } else {\r\n      s[0] = segments;\r\n      s[1] = [segments];\r\n      s[2] = 0;\r\n    }\r\n\r\n    // segment count\r\n    s[0] = Math.max(1, s[0] | 0);\r\n\r\n    // dash array\r\n    s[1] = s[1].filter(x => x >= 1).map(x => x | 0);\r\n    s[1].length || (s[1] = [s[0]]);\r\n    s[1].length % 2 && s[1].push(...s[1]);\r\n\r\n    // dash offset\r\n    s[2] |= 0;\r\n\r\n    return s;\r\n  }\r\n\r\n  #compute(\r\n    strip: Strip,\r\n    [nStripSeg, dashArr, dashOff]: ParsedSegments,\r\n    uvFn?: UvFn,\r\n  ) {\r\n    const indices: number[] = [];\r\n    const ps: number[] = [];\r\n    const uvs: number[] = [];\r\n\r\n    const lut_isDash = dashArr.flatMap((x, i) => Array(x).fill(1 - i % 2));\r\n    const lut_dashIdx = dashArr.flatMap((x) => Array.from(Array(x).keys()));\r\n    const lut_nDashSeg = dashArr.flatMap((x) => Array(x).fill(x));\r\n\r\n    const frms = strip.computeFrames(nStripSeg);\r\n    const rFn = strip.radius instanceof Function\r\n      ? strip.radius\r\n      : () => strip.radius as number\r\n      ;\r\n    const $v0 = new Vector3();\r\n    const $v1 = new Vector3();\r\n    const lutLen = lut_isDash.length;\r\n    for (let i = 0, $i, $lutIdx, $nDashSeg, $nVert = 0; i < nStripSeg;) {\r\n      // lut idx\r\n      $i = (dashOff + i) % lutLen;\r\n      $lutIdx = ($i < 0) ? lutLen + $i : $i;\r\n\r\n      // subseg count\r\n      $i = lut_nDashSeg[$lutIdx] - lut_dashIdx[$lutIdx];\r\n      $nDashSeg = (i + $i > nStripSeg) ? nStripSeg - i : $i;\r\n\r\n      // is dash\r\n      if (lut_isDash[$lutIdx]) {\r\n        for (let j = 0, $B, $P, $r, $v; j <= $nDashSeg; ++j) {\r\n          // pos\r\n          [$B, , , $P] = frms[i + j];\r\n          $r = rFn(i + j, nStripSeg);\r\n          $v0.copy($B).multiplyScalar($r).add($P);\r\n          $v1.copy($B).multiplyScalar(-$r).add($P);\r\n          ps.push($v0.x, $v0.y, $v0.z, $v1.x, $v1.y, $v1.z);\r\n\r\n          // uv\r\n          uvFn && uvs.push(...uvFn(\r\n            j < $nDashSeg\r\n              ? lut_dashIdx[$lutIdx + j]\r\n              : lut_dashIdx[$lutIdx + j - 1] + 1\r\n            , lut_nDashSeg[$lutIdx],\r\n            i + j, nStripSeg\r\n          ));\r\n\r\n          // idx\r\n          (j < $nDashSeg) && indices.push(\r\n            ($v = 2 * j + $nVert), $v + 1, $v + 2,\r\n            $v + 2, $v + 1, $v + 3\r\n          );\r\n        }\r\n        $nVert += 2 * ($nDashSeg + 1);\r\n      }\r\n      i += $nDashSeg;\r\n    }\r\n\r\n    this.attributes.position = new Float32BufferAttribute(ps, 3);\r\n    uvFn && (this.attributes.uv = new Float32BufferAttribute(uvs, 2));\r\n    this.setIndex(indices);\r\n    this.computeVertexNormals();\r\n  }\r\n}","import { Color, LineSegments, BufferGeometry, LineBasicMaterial, ColorRepresentation, BufferAttribute } from \"three\";\r\nimport { Strip } from \"./Strip\";\r\n\r\nexport class StripHelper extends LineSegments {\r\n\r\n  xColor: Color;\r\n  yColor: Color;\r\n  zColor: Color;\r\n\r\n  constructor(\r\n    public strip: Strip,\r\n    public segments: number,\r\n    public size = 1,\r\n    xColor: ColorRepresentation = 0xff0000,\r\n    yColor: ColorRepresentation = 0x00ff00,\r\n    zColor: ColorRepresentation = 0x0000ff\r\n  ) {\r\n    super(\r\n      new BufferGeometry(),\r\n      new LineBasicMaterial({ vertexColors: true })\r\n    );\r\n    this.type = \"StripHelper\";\r\n    this.xColor = new Color(xColor);\r\n    this.yColor = new Color(yColor);\r\n    this.zColor = new Color(zColor);\r\n    this.update();\r\n  }\r\n\r\n  update() {\r\n    const segments = Math.max(1, this.segments | 0);\r\n    const size = Math.max(0, this.size);\r\n    const frames = this.strip.computeFrames(segments);\r\n    const ps = new Float32Array(18 * frames.length);\r\n    const cs = new Float32Array(18 * frames.length);\r\n    this.geometry.dispose();\r\n    this.geometry.attributes.position = new BufferAttribute(ps, 3);\r\n    this.geometry.attributes.color = new BufferAttribute(cs, 3);\r\n\r\n    for (const [i, [B, N, T, O]] of frames.entries()) {\r\n      // pos\r\n      B.multiplyScalar(size).add(O);\r\n      N.multiplyScalar(size).add(O);\r\n      T.multiplyScalar(size).add(O);\r\n      ps.set([\r\n        O.x, O.y, O.z, B.x, B.y, B.z,\r\n        O.x, O.y, O.z, N.x, N.y, N.z,\r\n        O.x, O.y, O.z, T.x, T.y, T.z,\r\n      ], 18 * i);\r\n\r\n      // color\r\n      cs.set([\r\n        this.xColor.r, this.xColor.g, this.xColor.b,\r\n        this.xColor.r, this.xColor.g, this.xColor.b,\r\n        this.yColor.r, this.yColor.g, this.yColor.b,\r\n        this.yColor.r, this.yColor.g, this.yColor.b,\r\n        this.zColor.r, this.zColor.g, this.zColor.b,\r\n        this.zColor.r, this.zColor.g, this.zColor.b,\r\n      ], 18 * i);\r\n    }\r\n  }\r\n}","import { UvFn } from \"./Type\";\r\n\r\nfunction uvFnGen(\r\n  x: number,\r\n  mode: 0 | 1 | 2 | 3\r\n): ReturnType<UvFn> {\r\n  switch (mode) {\r\n    case 0: return [0, x, 1, x];\r\n    case 1: return [x, 1, x, 0];\r\n    case 2: return [1, x, 0, x];\r\n    case 3: return [x, 0, x, 1];\r\n  }\r\n}\r\n\r\nexport class UvPreset {\r\n  static dash: [UvFn, UvFn, UvFn, UvFn] = [\r\n    (i, I) => uvFnGen(i / I, 0),\r\n    (i, I) => uvFnGen(i / I, 1),\r\n    (i, I) => uvFnGen(1 - i / I, 2),\r\n    (i, I) => uvFnGen(1 - i / I, 3),\r\n  ];\r\n  static strip: [UvFn, UvFn, UvFn, UvFn] = [\r\n    (_i, _I, j, J) => uvFnGen(j / J, 0),\r\n    (_i, _I, j, J) => uvFnGen(j / J, 1),\r\n    (_i, _I, j, J) => uvFnGen(1 - j / J, 2),\r\n    (_i, _I, j, J) => uvFnGen(1 - j / J, 3),\r\n  ];\r\n}"],"names":["Strip","curve","radius","tilt","constructor","this","computeFrames","segments","$T0","Vector3","$B0","$N0","$T","$B","$N","$v0","$v1","frames","tiltFn","Function","$set","i","I","clone","getPointAt","t","applyAxisAngle","getTangentAt","set","Math","abs","x","y","z","crossVectors","normalize","u","NaN","copy","length","Number","EPSILON","acos","max","min","dot","StripGeometry","BufferGeometry","strip","uvFn","super","compute","parseSegments","static","s","Array","isArray","undefined","filter","map","push","nStripSeg","dashArr","dashOff","indices","ps","uvs","lut_isDash","flatMap","fill","lut_dashIdx","from","keys","lut_nDashSeg","frms","rFn","lutLen","$i","$lutIdx","$nDashSeg","$nVert","$P","$r","$v","j","multiplyScalar","add","attributes","position","Float32BufferAttribute","uv","setIndex","computeVertexNormals","StripHelper","LineSegments","size","xColor","yColor","zColor","LineBasicMaterial","vertexColors","type","Color","update","Float32Array","cs","geometry","dispose","BufferAttribute","color","B","N","T","O","entries","r","g","b","uvFnGen","mode","UvPreset","_i","_I","J"],"mappings":"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"}