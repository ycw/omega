{"version":3,"file":"DualBloom.js","sources":["../src/DualBloom/DualBloomShader.ts","../src/DualBloom/DualBlur/DualBlurShader.ts","../src/DualBloom/DualBlur/DualBlurPass.ts","../src/DualBloom/DualBloomPass.ts"],"sourcesContent":["export const LumaShader = {\r\n  uniforms: {\r\n    'tDiffuse': { value: null },\r\n    'uThreshold': { value: 0. }\r\n  },\r\n  vertexShader: /* glsl */ `\r\n    varying vec2 vUv;\r\n    void main() {\r\n      vUv = uv;\r\n      gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n    }\r\n  `,\r\n  fragmentShader: /* glsl */ `\r\n    uniform sampler2D tDiffuse;\r\n    uniform float uThreshold;\r\n    varying vec2 vUv;\r\n    void main() {\r\n      vec4 T = texture2D( tDiffuse, vUv );\r\n      float L = (T.r + T.r + T.g + T.g + T.g + T.b) / 6.;\r\n      gl_FragColor = step( uThreshold, L ) * T;\r\n    }\r\n  `\r\n};\r\n\r\n\r\n\r\nexport const CombineShader = {\r\n  uniforms: {\r\n    'tDiffuse': { value: null },\r\n    'tBlurred': { value: null },\r\n    'uIntensity': { value: 0. },\r\n  },\r\n  vertexShader: /* glsl */ `\r\n    varying vec2 vUv;\r\n    void main() {\r\n      vUv = uv;\r\n      gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n    }\r\n  `,\r\n  fragmentShader: /* glsl */ `\r\n    uniform sampler2D tDiffuse;\r\n    uniform sampler2D tBlurred;\r\n    uniform float uIntensity;\r\n    varying vec2 vUv;\r\n    void main() {\r\n      vec4 D = texture2D( tDiffuse, vUv );\r\n      vec4 B = texture2D( tBlurred, vUv );\r\n      gl_FragColor = D + uIntensity * B;\r\n    }\r\n  `\r\n};","export const DownsampleShader = {\r\n  uniforms: {\r\n    'tDiffuse': { value: null },\r\n    'uHalfPixel': { value: null }\r\n  },\r\n  vertexShader: /* glsl */ `\r\n    varying vec2 vUv;\r\n    void main() {\r\n      vUv = uv;\r\n      gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n    }\r\n  `,\r\n  fragmentShader: /* glsl */ `\r\n    uniform sampler2D tDiffuse;\r\n    uniform vec2 uHalfPixel;\r\n    varying vec2 vUv;\r\n    void main() {\r\n      gl_FragColor = (4. * texture2D( tDiffuse, vUv )\r\n        + texture2D( tDiffuse, vUv - uHalfPixel.xy )\r\n        + texture2D( tDiffuse, vUv + uHalfPixel.xy )\r\n        + texture2D( tDiffuse, vUv + vec2( uHalfPixel.x, -uHalfPixel.y ) )\r\n        + texture2D( tDiffuse, vUv + vec2( -uHalfPixel.x, uHalfPixel.y ) )\r\n      ) / 8.;\r\n    }\r\n  `\r\n};\r\n\r\n\r\n\r\nexport const UpsampleShader = {\r\n  uniforms: {\r\n    'tDiffuse': { value: null },\r\n    'uOffset': { value: null } // .xy=half px; .zw=full px\r\n  },\r\n  vertexShader: /* glsl */ `\r\n    varying vec2 vUv;\r\n    void main() {\r\n      vUv = uv;\r\n      gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n    }\r\n  `,\r\n  fragmentShader: /* glsl */ `\r\n    uniform sampler2D tDiffuse;\r\n    uniform vec4 uOffset;\r\n    varying vec2 vUv;\r\n    void main() {\r\n      gl_FragColor = ( 2. * (\r\n        texture2D( tDiffuse, vUv + uOffset.xy )\r\n        + texture2D( tDiffuse, vUv - uOffset.xy )\r\n        + texture2D( tDiffuse, vUv + vec2( uOffset.x, -uOffset.y ) )\r\n        + texture2D( tDiffuse, vUv + vec2( -uOffset.x, uOffset.y ) )\r\n      ) + texture2D( tDiffuse, vUv + vec2( uOffset.z, 0. ) )\r\n        + texture2D( tDiffuse, vUv + vec2( 0., uOffset.w ) )\r\n        + texture2D( tDiffuse, vUv + vec2( -uOffset.z, 0. ) )\r\n        + texture2D( tDiffuse, vUv + vec2( 0., -uOffset.w ) )\r\n      ) / 12.;\r\n    }\r\n  `\r\n};","import { ShaderMaterial, Vector2, UniformsUtils, WebGLRenderer, WebGLRenderTarget, Vector4 } from 'three';\r\nimport { Pass, FullScreenQuad } from 'three/examples/jsm/postprocessing/Pass.js';\r\nimport { CopyShader } from 'three/examples/jsm/shaders/CopyShader.js';\r\nimport { DownsampleShader, UpsampleShader } from './DualBlurShader';\r\n\r\nclass DownsamplePass extends Pass {\r\n\r\n  fsQuad: FullScreenQuad;\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.fsQuad = new FullScreenQuad(new ShaderMaterial({\r\n      uniforms: UniformsUtils.clone(DownsampleShader.uniforms),\r\n      vertexShader: DownsampleShader.vertexShader,\r\n      fragmentShader: DownsampleShader.fragmentShader,\r\n    }));\r\n    (this.fsQuad.material as ShaderMaterial).uniforms['uHalfPixel'].value = new Vector2();\r\n  }\r\n\r\n  render(\r\n    renderer: WebGLRenderer,\r\n    writeBuffer: WebGLRenderTarget | null,\r\n    readBuffer: WebGLRenderTarget\r\n  ) {\r\n    (this.fsQuad.material as ShaderMaterial).uniforms['tDiffuse'].value = readBuffer.texture;\r\n    renderer.setRenderTarget(writeBuffer);\r\n    this.fsQuad.render(renderer);\r\n  }\r\n}\r\n\r\nclass UpsamplePass extends Pass {\r\n\r\n  fsQuad: FullScreenQuad;\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.fsQuad = new FullScreenQuad(new ShaderMaterial({\r\n      uniforms: UniformsUtils.clone(UpsampleShader.uniforms),\r\n      vertexShader: UpsampleShader.vertexShader,\r\n      fragmentShader: UpsampleShader.fragmentShader,\r\n    }));\r\n    (this.fsQuad.material as ShaderMaterial).uniforms['uOffset'].value = new Vector4();\r\n  }\r\n\r\n  render(\r\n    renderer: WebGLRenderer,\r\n    writeBuffer: WebGLRenderTarget | null,\r\n    readBuffer: WebGLRenderTarget\r\n  ) {\r\n    (this.fsQuad.material as ShaderMaterial).uniforms['tDiffuse'].value = readBuffer.texture;\r\n    renderer.setRenderTarget(writeBuffer);\r\n    this.fsQuad.render(renderer);\r\n  }\r\n}\r\n\r\n\r\n\r\nexport class DualBlurPass extends Pass {\r\n\r\n  #rts: WebGLRenderTarget[];\r\n  #passes: (DownsamplePass | UpsamplePass)[];\r\n  #maxDuals: number;\r\n  #duals: number;\r\n  #effectiveDuals: number;\r\n  #writeBuffer: null | WebGLRenderTarget;\r\n  #readBuffer: null | WebGLRenderTarget;\r\n  \r\n  #copyPass: FullScreenQuad;\r\n\r\n  constructor({\r\n    maxDuals = 8,\r\n    duals = 4\r\n  } = {}) {\r\n    super();\r\n\r\n    if (maxDuals < 1) {\r\n      throw new Error(`maxDuals (${maxDuals}) must >= 1`);\r\n    }\r\n\r\n    this.#rts = [];\r\n    this.#passes = [];\r\n    this.#maxDuals = maxDuals | 0;\r\n    this.#duals = duals;\r\n    this.#effectiveDuals = 0;\r\n    this.#computeEffectiveDuals();\r\n\r\n    this.#writeBuffer = null;\r\n    this.#readBuffer = new WebGLRenderTarget(0, 0);\r\n\r\n    for (let i = 0, I = maxDuals; i < I; ++i) { // init\r\n      this.#passes[i] = new DownsamplePass();\r\n      this.#passes[maxDuals + i] = new UpsamplePass();\r\n      this.#rts[i] = new WebGLRenderTarget(0, 0);\r\n      this.#rts[maxDuals + i] = new WebGLRenderTarget(0, 0);\r\n    }\r\n\r\n    // use as tee when effectiveDuals is 0\r\n    this.#copyPass = new FullScreenQuad(new ShaderMaterial(CopyShader));\r\n  }\r\n\r\n  setSize(w: number, h: number) {\r\n    for (let i = 0, I = this.#maxDuals; i < I; ++i) {\r\n      this.#rts[i].setSize(Math.max(1, w >> (i + 1)), Math.max(1, h >> (i + 1)));\r\n      this.#rts[2 * I - i - 1].setSize(Math.max(1, w >> i), Math.max(1, h >> i));\r\n    }\r\n  }\r\n\r\n  render(\r\n    renderer: WebGLRenderer,\r\n    writeBuffer: WebGLRenderTarget,\r\n    readBuffer: WebGLRenderTarget\r\n  ) {\r\n\r\n    if (this.#effectiveDuals === 0) {\r\n      renderer.setRenderTarget(this.renderToScreen ? null : writeBuffer);\r\n      (this.#copyPass.material as ShaderMaterial).uniforms['tDiffuse'].value = readBuffer.texture;\r\n      this.#copyPass.render(renderer);\r\n      return;\r\n    }\r\n\r\n    this.#readBuffer = readBuffer;\r\n\r\n    for (let i = 0, I = this.#effectiveDuals; i < I; ++i) { // downsamples\r\n      this.#writeBuffer = this.#rts[i];\r\n      (this.#passes[i].fsQuad.material as ShaderMaterial).uniforms['uHalfPixel'].value.set(\r\n        .5 / this.#readBuffer.width, .5 / this.#readBuffer.height\r\n      );\r\n      this.#passes[i].render(renderer, this.#writeBuffer, this.#readBuffer);\r\n      this.#readBuffer = this.#writeBuffer; // swap\r\n    }\r\n\r\n    for (let I = this.#rts.length, i = I - this.#effectiveDuals; i < I; ++i) { // upsamples\r\n      this.#writeBuffer = (i === I - 1)\r\n        ? (this.renderToScreen ? null : writeBuffer)\r\n        : this.#rts[i];\r\n\r\n      if (this.#readBuffer) {\r\n        (this.#passes[i].fsQuad.material as ShaderMaterial).uniforms['uOffset'].value.set(\r\n          .5 / this.#readBuffer.width, .5 / this.#readBuffer.height, // half px\r\n          1 / this.#readBuffer.width, 1 / this.#readBuffer.height // full px\r\n        );\r\n        this.#passes[i].render(renderer, this.#writeBuffer, this.#readBuffer);\r\n        this.#readBuffer = this.#writeBuffer;\r\n      }\r\n    }\r\n  }\r\n\r\n  #computeEffectiveDuals() {\r\n    this.#effectiveDuals = Math.min(Math.max(0, this.#duals | 0), this.maxDuals);\r\n    if (this.duals !== this.#effectiveDuals) {\r\n      console.warn(`effective duals is ${this.#effectiveDuals}`);\r\n    }\r\n  }\r\n\r\n  get duals() { return this.#duals }\r\n  set duals(value) {\r\n    this.#duals = value;\r\n    this.#computeEffectiveDuals();\r\n  }\r\n\r\n  get maxDuals() { return this.#maxDuals }\r\n}\r\n","import { ShaderMaterial, WebGLRenderTarget, UniformsUtils, WebGLRenderer } from 'three';\r\nimport { Pass, FullScreenQuad } from 'three/examples/jsm/postprocessing/Pass.js';\r\nimport { LumaShader, CombineShader } from './DualBloomShader';\r\nimport { DualBlurPass } from './DualBlur';\r\n\r\nexport class DualBloomPass extends Pass {\r\n\r\n  #lumaPass: FullScreenQuad;\r\n  #lumaRT: WebGLRenderTarget;\r\n  #dualBlurPass: DualBlurPass;\r\n  #dualBlurRT: WebGLRenderTarget;\r\n  #combinePass: FullScreenQuad;\r\n  #blurriness!: number; // will set by setter .blurriness\r\n\r\n  // cache\r\n\r\n  #lumaPassUniforms: ShaderMaterial['uniforms'];\r\n  #combinePassUniforms: ShaderMaterial['uniforms'];\r\n\r\n  constructor({\r\n    threshold = .5,\r\n    blurriness = .5,\r\n    intensity = .5,\r\n    maxDuals = 8,\r\n  } = {}) {\r\n    super();\r\n\r\n    this.#lumaPass = new FullScreenQuad(new ShaderMaterial({\r\n      uniforms: UniformsUtils.clone(LumaShader.uniforms),\r\n      vertexShader: LumaShader.vertexShader,\r\n      fragmentShader: LumaShader.fragmentShader,\r\n    }));\r\n\r\n    this.#lumaPassUniforms = (this.#lumaPass.material as ShaderMaterial).uniforms;\r\n    this.#lumaPassUniforms['uThreshold'].value = threshold;\r\n    this.#lumaRT = new WebGLRenderTarget(0, 0);\r\n\r\n    this.#dualBlurPass = new DualBlurPass({ maxDuals });\r\n    this.#dualBlurRT = new WebGLRenderTarget(0, 0);\r\n    this.blurriness = blurriness; // which set `this.#blurriness`\r\n\r\n    this.#combinePass = new FullScreenQuad(new ShaderMaterial({\r\n      uniforms: UniformsUtils.clone(CombineShader.uniforms),\r\n      vertexShader: CombineShader.vertexShader,\r\n      fragmentShader: CombineShader.fragmentShader,\r\n    }));\r\n    this.#combinePassUniforms = (this.#combinePass.material as ShaderMaterial).uniforms;\r\n    this.#combinePassUniforms['uIntensity'].value = intensity;\r\n  }\r\n\r\n  render(\r\n    renderer: WebGLRenderer,\r\n    writeBuffer: WebGLRenderTarget,\r\n    readBuffer: WebGLRenderTarget\r\n  ) {\r\n    if (this.#combinePassUniforms['uIntensity'].value !== 0) {\r\n      // ---- luma pass\r\n      renderer.setRenderTarget(this.#lumaRT);\r\n      this.#lumaPassUniforms['tDiffuse'].value = readBuffer.texture;\r\n      this.#lumaPass.render(renderer);\r\n      // ---- dual blur pass\r\n      this.#dualBlurPass.renderToScreen = false;\r\n      this.#dualBlurPass.render(renderer, this.#dualBlurRT, this.#lumaRT);\r\n    }\r\n    // ---- combine pass\r\n    if (this.renderToScreen) {\r\n      renderer.setRenderTarget(null);\r\n    } else {\r\n      renderer.setRenderTarget(writeBuffer);\r\n      if (this.clear) renderer.clear();\r\n    }\r\n    this.#combinePassUniforms['tDiffuse'].value = readBuffer.texture;\r\n    this.#combinePassUniforms['tBlurred'].value = this.#dualBlurRT.texture;\r\n    this.#combinePass.render(renderer);\r\n  }\r\n\r\n  setSize(w: number, h: number) {\r\n    this.#lumaRT.setSize(w, h);\r\n    this.#dualBlurRT.setSize(w, h);\r\n    this.#dualBlurPass.setSize(w, h);\r\n  }\r\n\r\n  get intensity() { return this.#combinePassUniforms['uIntensity'].value }\r\n  set intensity(value) {\r\n    this.#combinePassUniforms['uIntensity'].value = value;\r\n  }\r\n\r\n  get threshold() { return this.#lumaPassUniforms['uThreshold'].value }\r\n  set threshold(value) {\r\n    this.#lumaPassUniforms['uThreshold'].value = value;\r\n  }\r\n\r\n  get blurriness() { return this.#blurriness }\r\n  set blurriness(value) {\r\n    this.#blurriness = value;\r\n    if (value > 1 || value < 0) {\r\n      console.warn(`blurriness (${value}) will be clamped (in 0..1) internally`);\r\n      this.#dualBlurPass.duals = Math.ceil(Math.max(0, Math.min(1, value)) * this.#dualBlurPass.maxDuals);\r\n    } else {\r\n      this.#dualBlurPass.duals = Math.ceil(value * this.#dualBlurPass.maxDuals);\r\n    }\r\n  }\r\n\r\n  get maxDuals() { return this.#dualBlurPass.maxDuals }\r\n};\r\n"],"names":["LumaShader","uniforms","tDiffuse","value","uThreshold","vertexShader","fragmentShader","CombineShader","tBlurred","uIntensity","DownsampleShader","uHalfPixel","UpsampleShader","uOffset","DownsamplePass","Pass","fsQuad","constructor","super","this","FullScreenQuad","ShaderMaterial","UniformsUtils","clone","material","Vector2","render","renderer","writeBuffer","readBuffer","texture","setRenderTarget","UpsamplePass","Vector4","DualBlurPass","rts","passes","maxDuals","duals","effectiveDuals","copyPass","Error","computeEffectiveDuals","WebGLRenderTarget","i","I","CopyShader","setSize","w","h","Math","max","renderToScreen","set","width","height","length","min","console","warn","DualBloomPass","lumaPass","lumaRT","dualBlurPass","dualBlurRT","combinePass","blurriness","lumaPassUniforms","combinePassUniforms","threshold","intensity","clear","ceil"],"mappings":"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"}