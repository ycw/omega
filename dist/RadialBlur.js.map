{"version":3,"file":"RadialBlur.js","sources":["../src/RadialBlur/RadialBlurShader.ts","../src/RadialBlur/RadialBlurPass.ts"],"sourcesContent":["export const RadialBlurShader = {\r\n  defines: {\r\n    'MAX_ITERATIONS': 100,\r\n  },\r\n  uniforms: {\r\n    'tDiffuse': { value: null },\r\n    'uRadialCenter': { value: null },\r\n    'uIntensity': { value: 1.0 },\r\n    'uIterations': { value: 10 }\r\n  },\r\n  vertexShader: /* glsl */ `\r\n    varying vec2 vUv;\r\n    void main() {\r\n      vUv = uv;\r\n      gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n    }\r\n  `,\r\n  fragmentShader: /* glsl */ `\r\n    uniform sampler2D tDiffuse;\r\n    uniform vec2 uRadialCenter;\r\n    uniform float uIntensity;\r\n    uniform float uIterations;\r\n    varying vec2 vUv;\r\n    void main() {\r\n      vec2 v = uIntensity * ( uRadialCenter * .5 + .5 - vUv );\r\n      const float MAX_I = float( MAX_ITERATIONS );\r\n      float I = max( 1., min( uIterations, MAX_I ) );\r\n      for ( float i = 0. ; i < MAX_I ; i++ ) {\r\n        if ( i >= uIterations ) break;\r\n        gl_FragColor += texture2D( tDiffuse, vUv + v * i / I );\r\n      }\r\n      gl_FragColor /= I;\r\n    }\r\n  `\r\n};","import { Vector2, UniformsUtils, ShaderMaterial, WebGLRenderer, WebGLRenderTarget } from 'three';\r\nimport { Pass, FullScreenQuad } from 'three/examples/jsm/postprocessing/Pass.js';\r\nimport { RadialBlurShader } from './RadialBlurShader';\r\n\r\nexport class RadialBlurPass extends Pass {\r\n\r\n  #fsQuad: FullScreenQuad;\r\n  #uniforms: ShaderMaterial['uniforms'];\r\n  #defines: ShaderMaterial['defines'];\r\n\r\n  constructor({\r\n    intensity = 1.,\r\n    iterations = 10,\r\n    maxIterations = 100,\r\n    radialCenter = new Vector2(),\r\n  } = {}) {\r\n    super();\r\n\r\n    const material = new ShaderMaterial({\r\n      defines: {\r\n        ...RadialBlurShader.defines,\r\n        MAX_ITERATIONS: maxIterations\r\n      },\r\n      uniforms: UniformsUtils.merge([RadialBlurShader.uniforms, {\r\n        uRadialCenter: { value: radialCenter },\r\n        uIntensity: { value: intensity },\r\n        uIterations: { value: iterations }\r\n      }]),\r\n      vertexShader: RadialBlurShader.vertexShader,\r\n      fragmentShader: RadialBlurShader.fragmentShader,\r\n    });\r\n\r\n    this.#fsQuad = new FullScreenQuad(material);\r\n    this.#uniforms = material.uniforms;\r\n    this.#defines = material.defines;\r\n  }\r\n\r\n  render(\r\n    renderer: WebGLRenderer,\r\n    writeBuffer: WebGLRenderTarget,\r\n    readBuffer: WebGLRenderTarget\r\n  ) {\r\n    this.#uniforms['tDiffuse'].value = readBuffer.texture;\r\n    if (this.renderToScreen) {\r\n      renderer.setRenderTarget(null);\r\n    } else {\r\n      renderer.setRenderTarget(writeBuffer);\r\n      if (this.clear) renderer.clear();\r\n    }\r\n    this.#fsQuad.render(renderer);\r\n  }\r\n\r\n  get iterations() {\r\n    return this.#uniforms.uIterations.value;\r\n  }\r\n\r\n  set iterations(value) {\r\n    if (value > this.#defines.MAX_ITERATIONS) {\r\n      console.warn(`iterations (${value}) will be capped by maxIterations (${this.#defines.MAX_ITERATIONS}) in shader`);\r\n    }\r\n    this.#uniforms.uIterations.value = value;\r\n  }\r\n\r\n  get intensity() {\r\n    return this.#uniforms.uIntensity.value;\r\n  }\r\n\r\n  set intensity(value) {\r\n    this.#uniforms.uIntensity.value = value;\r\n  }\r\n\r\n  get radialCenter() {\r\n    return this.#uniforms.uRadialCenter.value;\r\n  }\r\n\r\n  set radialCenter(value) {\r\n    this.#uniforms.uRadialCenter.value = value;\r\n  }\r\n\r\n  get maxIterations() {\r\n    return this.#defines.MAX_ITERATIONS;\r\n  }\r\n\r\n};\r\n"],"names":["RadialBlurShader","defines","MAX_ITERATIONS","uniforms","tDiffuse","value","uRadialCenter","uIntensity","uIterations","vertexShader","fragmentShader","RadialBlurPass","Pass","fsQuad","constructor","intensity","iterations","maxIterations","radialCenter","Vector2","super","material","ShaderMaterial","UniformsUtils","merge","this","FullScreenQuad","render","renderer","writeBuffer","readBuffer","texture","renderToScreen","setRenderTarget","clear","console","warn"],"mappings":"kKAAaA,EAAmB,CAC9BC,QAAS,CACPC,eAAkB,KAEpBC,SAAU,CACRC,SAAY,CAAEC,MAAO,MACrBC,cAAiB,CAAED,MAAO,MAC1BE,WAAc,CAAEF,MAAO,GACvBG,YAAe,CAAEH,MAAO,KAE1BI,aAAyB,0JAOzBC,eAA2B,uiBCbhBC,UAAuBC,EAElCC,GACAV,GACAF,GAEAa,aAAYC,UACVA,EAAY,EAAEC,WACdA,EAAa,GAAEC,cACfA,EAAgB,IAAGC,aACnBA,EAAe,IAAIC,GACjB,IACFC,QAEA,MAAMC,EAAW,IAAIC,EAAe,CAClCrB,QAAS,IACJD,EAAiBC,QACpBC,eAAgBe,GAElBd,SAAUoB,EAAcC,MAAM,CAACxB,EAAiBG,SAAU,CACxDG,cAAe,CAAED,MAAOa,GACxBX,WAAY,CAAEF,MAAOU,GACrBP,YAAa,CAAEH,MAAOW,MAExBP,aAAcT,EAAiBS,aAC/BC,eAAgBV,EAAiBU,iBAGnCe,MAAKZ,EAAU,IAAIa,EAAeL,GAClCI,MAAKtB,EAAYkB,EAASlB,SAC1BsB,MAAKxB,EAAWoB,EAASpB,QAG3B0B,OACEC,EACAC,EACAC,GAEAL,MAAKtB,EAAoB,SAAEE,MAAQyB,EAAWC,QAC1CN,KAAKO,eACPJ,EAASK,gBAAgB,OAEzBL,EAASK,gBAAgBJ,GACrBJ,KAAKS,OAAON,EAASM,SAE3BT,MAAKZ,EAAQc,OAAOC,GAGlBZ,iBACF,OAAOS,MAAKtB,EAAUK,YAAYH,MAGhCW,eAAWX,GACTA,EAAQoB,MAAKxB,EAASC,gBACxBiC,QAAQC,KAAK,eAAe/B,uCAA2CoB,MAAKxB,EAASC,6BAEvFuB,MAAKtB,EAAUK,YAAYH,MAAQA,EAGjCU,gBACF,OAAOU,MAAKtB,EAAUI,WAAWF,MAG/BU,cAAUV,GACZoB,MAAKtB,EAAUI,WAAWF,MAAQA,EAGhCa,mBACF,OAAOO,MAAKtB,EAAUG,cAAcD,MAGlCa,iBAAab,GACfoB,MAAKtB,EAAUG,cAAcD,MAAQA,EAGnCY,oBACF,OAAOQ,MAAKxB,EAASC"}