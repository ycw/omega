import{WebGLRenderTarget as e,ShaderMaterial as t,UniformsUtils as s,Vector2 as i,Vector4 as r}from"three";import{Pass as n,FullScreenQuad as a}from"three/examples/jsm/postprocessing/Pass.js";import{CopyShader as f}from"three/examples/jsm/shaders/CopyShader.js";function u(e,t,s,i){if("a"===s&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===s?i:"a"===s?i.call(e):i?i.value:t.get(e)}function h(e,t,s,i,r){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!r)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===i?r.call(e,s):r?r.value=s:t.set(e,s),s}const l={uniforms:{tDiffuse:{value:null},uThreshold:{value:0}},vertexShader:"\n    varying vec2 vUv;\n    void main() {\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n    }\n  ",fragmentShader:"\n    uniform sampler2D tDiffuse;\n    uniform float uThreshold;\n    varying vec2 vUv;\n    void main() {\n      vec4 T = texture2D( tDiffuse, vUv );\n      float L = (T.r + T.r + T.g + T.g + T.g + T.b) / 6.;\n      gl_FragColor = step( uThreshold, L ) * T;\n    }\n  "},o={uniforms:{tDiffuse:{value:null},tBlurred:{value:null},uIntensity:{value:0}},vertexShader:"\n    varying vec2 vUv;\n    void main() {\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n    }\n  ",fragmentShader:"\n    uniform sampler2D tDiffuse;\n    uniform sampler2D tBlurred;\n    uniform float uIntensity;\n    varying vec2 vUv;\n    void main() {\n      vec4 D = texture2D( tDiffuse, vUv );\n      vec4 B = texture2D( tBlurred, vUv );\n      gl_FragColor = D + uIntensity * B;\n    }\n  "},v={uniforms:{tDiffuse:{value:null},uHalfPixel:{value:null}},vertexShader:"\n    varying vec2 vUv;\n    void main() {\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n    }\n  ",fragmentShader:"\n    uniform sampler2D tDiffuse;\n    uniform vec2 uHalfPixel;\n    varying vec2 vUv;\n    void main() {\n      gl_FragColor = (4. * texture2D( tDiffuse, vUv )\n        + texture2D( tDiffuse, vUv - uHalfPixel.xy )\n        + texture2D( tDiffuse, vUv + uHalfPixel.xy )\n        + texture2D( tDiffuse, vUv + vec2( uHalfPixel.x, -uHalfPixel.y ) )\n        + texture2D( tDiffuse, vUv + vec2( -uHalfPixel.x, uHalfPixel.y ) )\n      ) / 8.;\n    }\n  "},d={uniforms:{tDiffuse:{value:null},uOffset:{value:null}},vertexShader:"\n    varying vec2 vUv;\n    void main() {\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n    }\n  ",fragmentShader:"\n    uniform sampler2D tDiffuse;\n    uniform vec4 uOffset;\n    varying vec2 vUv;\n    void main() {\n      gl_FragColor = ( 2. * (\n        texture2D( tDiffuse, vUv + uOffset.xy )\n        + texture2D( tDiffuse, vUv - uOffset.xy )\n        + texture2D( tDiffuse, vUv + vec2( uOffset.x, -uOffset.y ) )\n        + texture2D( tDiffuse, vUv + vec2( -uOffset.x, uOffset.y ) )\n      ) + texture2D( tDiffuse, vUv + vec2( uOffset.z, 0. ) )\n        + texture2D( tDiffuse, vUv + vec2( 0., uOffset.w ) )\n        + texture2D( tDiffuse, vUv + vec2( -uOffset.z, 0. ) )\n        + texture2D( tDiffuse, vUv + vec2( 0., -uOffset.w ) )\n      ) / 12.;\n    }\n  "};var m,x,c,w,D,g,p,S,y,M,T,U,P,k,W,O,b,j;class H extends n{constructor(){super(),this.fsQuad=new a(new t({uniforms:s.clone(v.uniforms),vertexShader:v.vertexShader,fragmentShader:v.fragmentShader})),this.fsQuad.material.uniforms.uHalfPixel.value=new i}render(e,t,s){this.fsQuad.material.uniforms.tDiffuse.value=s.texture,e.setRenderTarget(t),this.fsQuad.render(e)}}class Q extends n{constructor(){super(),this.fsQuad=new a(new t({uniforms:s.clone(d.uniforms),vertexShader:d.vertexShader,fragmentShader:d.fragmentShader})),this.fsQuad.material.uniforms.uOffset.value=new r}render(e,t,s){this.fsQuad.material.uniforms.tDiffuse.value=s.texture,e.setRenderTarget(t),this.fsQuad.render(e)}}class z extends n{constructor({maxDuals:s=8,duals:i=4}={}){if(super(),m.add(this),x.set(this,void 0),c.set(this,void 0),w.set(this,void 0),D.set(this,void 0),g.set(this,void 0),p.set(this,void 0),S.set(this,void 0),y.set(this,void 0),s<1)throw new Error(`maxDuals (${s}) must >= 1`);h(this,x,[],"f"),h(this,c,[],"f"),h(this,w,0|s,"f"),h(this,D,i,"f"),h(this,g,0,"f"),u(this,m,"m",M).call(this),h(this,p,null,"f"),h(this,S,new e(0,0),"f");for(let t=0,i=s;t<i;++t)u(this,c,"f")[t]=new H,u(this,c,"f")[s+t]=new Q,u(this,x,"f")[t]=new e(0,0),u(this,x,"f")[s+t]=new e(0,0);h(this,y,new a(new t(f)),"f")}setSize(e,t){for(let s=0,i=u(this,w,"f");s<i;++s)u(this,x,"f")[s].setSize(Math.max(1,e>>s+1),Math.max(1,t>>s+1)),u(this,x,"f")[2*i-s-1].setSize(Math.max(1,e>>s),Math.max(1,t>>s))}render(e,t,s){if(0===u(this,g,"f"))return e.setRenderTarget(this.renderToScreen?null:t),u(this,y,"f").material.uniforms.tDiffuse.value=s.texture,void u(this,y,"f").render(e);h(this,S,s,"f");for(let t=0,s=u(this,g,"f");t<s;++t)h(this,p,u(this,x,"f")[t],"f"),u(this,c,"f")[t].fsQuad.material.uniforms.uHalfPixel.value.set(.5/u(this,S,"f").width,.5/u(this,S,"f").height),u(this,c,"f")[t].render(e,u(this,p,"f"),u(this,S,"f")),h(this,S,u(this,p,"f"),"f");for(let s=u(this,x,"f").length,i=s-u(this,g,"f");i<s;++i)h(this,p,i===s-1?this.renderToScreen?null:t:u(this,x,"f")[i],"f"),u(this,S,"f")&&(u(this,c,"f")[i].fsQuad.material.uniforms.uOffset.value.set(.5/u(this,S,"f").width,.5/u(this,S,"f").height,1/u(this,S,"f").width,1/u(this,S,"f").height),u(this,c,"f")[i].render(e,u(this,p,"f"),u(this,S,"f")),h(this,S,u(this,p,"f"),"f"))}get duals(){return u(this,D,"f")}set duals(e){h(this,D,e,"f"),u(this,m,"m",M).call(this)}get maxDuals(){return u(this,w,"f")}}x=new WeakMap,c=new WeakMap,w=new WeakMap,D=new WeakMap,g=new WeakMap,p=new WeakMap,S=new WeakMap,y=new WeakMap,m=new WeakSet,M=function(){h(this,g,Math.min(Math.max(0,0|u(this,D,"f")),this.maxDuals),"f"),this.duals!==u(this,g,"f")&&console.warn(`effective duals is ${u(this,g,"f")}`)};class _ extends n{constructor({threshold:i=.5,blurriness:r=.5,intensity:n=.5,maxDuals:f=8}={}){super(),T.set(this,void 0),U.set(this,void 0),P.set(this,void 0),k.set(this,void 0),W.set(this,void 0),O.set(this,void 0),b.set(this,void 0),j.set(this,void 0),h(this,T,new a(new t({uniforms:s.clone(l.uniforms),vertexShader:l.vertexShader,fragmentShader:l.fragmentShader})),"f"),h(this,b,u(this,T,"f").material.uniforms,"f"),u(this,b,"f").uThreshold.value=i,h(this,U,new e(0,0),"f"),h(this,P,new z({maxDuals:f}),"f"),h(this,k,new e(0,0),"f"),this.blurriness=r,h(this,W,new a(new t({uniforms:s.clone(o.uniforms),vertexShader:o.vertexShader,fragmentShader:o.fragmentShader})),"f"),h(this,j,u(this,W,"f").material.uniforms,"f"),u(this,j,"f").uIntensity.value=n}render(e,t,s){0!==u(this,j,"f").uIntensity.value&&(e.setRenderTarget(u(this,U,"f")),u(this,b,"f").tDiffuse.value=s.texture,u(this,T,"f").render(e),u(this,P,"f").renderToScreen=!1,u(this,P,"f").render(e,u(this,k,"f"),u(this,U,"f"))),this.renderToScreen?e.setRenderTarget(null):(e.setRenderTarget(t),this.clear&&e.clear()),u(this,j,"f").tDiffuse.value=s.texture,u(this,j,"f").tBlurred.value=u(this,k,"f").texture,u(this,W,"f").render(e)}setSize(e,t){u(this,U,"f").setSize(e,t),u(this,k,"f").setSize(e,t),u(this,P,"f").setSize(e,t)}get intensity(){return u(this,j,"f").uIntensity.value}set intensity(e){u(this,j,"f").uIntensity.value=e}get threshold(){return u(this,b,"f").uThreshold.value}set threshold(e){u(this,b,"f").uThreshold.value=e}get blurriness(){return u(this,O,"f")}set blurriness(e){h(this,O,e,"f"),e>1||e<0?(console.warn(`blurriness (${e}) will be clamped (in 0..1) internally`),u(this,P,"f").duals=Math.ceil(Math.max(0,Math.min(1,e))*u(this,P,"f").maxDuals)):u(this,P,"f").duals=Math.ceil(e*u(this,P,"f").maxDuals)}get maxDuals(){return u(this,P,"f").maxDuals}}T=new WeakMap,U=new WeakMap,P=new WeakMap,k=new WeakMap,W=new WeakMap,O=new WeakMap,b=new WeakMap,j=new WeakMap;export{_ as DualBloomPass,z as DualBlurPass};
//# sourceMappingURL=DualBloom.js.map
