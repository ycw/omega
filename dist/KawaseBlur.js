import{WebGLRenderTarget as e,Vector2 as r,UniformsUtils as s,ShaderMaterial as n}from"three";import{Pass as t,FullScreenQuad as i}from"three/examples/jsm/postprocessing/Pass.js";import{EffectComposer as o}from"three/examples/jsm/postprocessing/EffectComposer.js";const f={uniforms:{tDiffuse:{value:null},uOffset:{value:null}},vertexShader:"\n    varying vec2 vUv;\n    void main() {\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n  }",fragmentShader:"\n    uniform sampler2D tDiffuse;\n    uniform vec2 uOffset;\n    varying vec2 vUv;\n    void main() {\n      gl_FragColor = .25 * (\n        texture2D( tDiffuse, vUv + uOffset )\n        + texture2D( tDiffuse, vUv - uOffset )\n        + texture2D( tDiffuse, vUv + uOffset * vec2( 1., -1. ) )\n        + texture2D( tDiffuse, vUv + uOffset * vec2( -1., 1. ) )\n      );\n    }\n  "};class a extends t{fsQuad;uniforms;shouldRenderToScreen;constructor(e){super();const r=s.clone(f.uniforms);r.uOffset.value=e;const t=new n({uniforms:r,vertexShader:f.vertexShader,fragmentShader:f.fragmentShader});this.fsQuad=new i(t),this.uniforms=t.uniforms,this.shouldRenderToScreen=!1}render(e,r,s){this.uniforms.tDiffuse.value=s.texture,this.shouldRenderToScreen?e.setRenderTarget(null):(e.setRenderTarget(r),this.clear&&e.clear()),this.fsQuad.render(e)}}class l extends t{#e;#r;#s;constructor({renderer:r,kernels:s=[0,1]}){super(),this.#e=s,this.#r=r,this.#s=new o(r,new e(0,0)),this.setKernels(s)}getKernels(){return Array.from(this.#e)}setKernels(e){const s=this.#r.getDrawingBufferSize(new r);for(const[n,t]of e.entries()){const e=(new r).setScalar(.5+t).divide(s),i=this.#s.passes[n];i?(i.uniforms.uOffset.value=e,i.shouldRenderToScreen=!1):this.#s.addPass(new a(e))}this.#s.passes.length=e.length,this.#s.reset(),this.#e=Array.from(e)}render(e,r,s){0!==this.#e.length&&(this.#s.readBuffer=s,this.#s.writeBuffer=r,this.#s.passes[this.#s.passes.length-1].shouldRenderToScreen=this.renderToScreen,this.#s.render())}setSize(e,r){this.#s.setSize(e,r),this.setKernels(this.#e)}}export{l as KawaseBlurPass,f as KawaseBlurShader};
//# sourceMappingURL=KawaseBlur.js.map
